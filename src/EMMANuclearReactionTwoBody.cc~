/* 
   Oliver Kirsebom, TRIUMF, February 2013

   Class description:
   Nuclear-reaction model for two-body final-state (Z3,A3)+(Z4,A4)

   (G4HadronElastic.cc used as starting point)
*/



#include <iostream>

#include "EMMANuclearReactionTwoBody.hh"
#include "globals.hh"
#include "G4PhysicalConstants.hh"
#include "G4SystemOfUnits.hh"
#include "Randomize.hh"
#include "G4ParticleTable.hh"
#include "G4IonTable.hh"
#include "G4Proton.hh"
#include "G4Neutron.hh"
#include "G4Deuteron.hh"
#include "G4Triton.hh"
#include "G4Alpha.hh"
#include "G4He3.hh"
#include "G4Gamma.hh"
#include "G4NucleiProperties.hh"


EMMANuclearReactionTwoBody::EMMANuclearReactionTwoBody(const G4String& name
						       , G4double Z3, G4double A3
						       , G4double Z4, G4double A4
						       , G4double qmax )
 :G4HadronicInteraction(name)
{
  SetMinEnergy(0.0);
  SetMaxEnergy(DBL_MAX);

  theProton   = G4Proton::Proton();
  theNeutron  = G4Neutron::Neutron();
  theDeuteron = G4Deuteron::Deuteron();
  theTriton = G4Triton::Triton();
  theAlpha    = G4Alpha::Alpha();
  theHe3    = G4He3::He3();
  theGamma = G4Gamma::Gamma();

  Z3rea = Z3; A3rea = A3;
  Z4rea = Z4; A4rea = A4;
  thetaCMmax = qmax;

}



G4HadFinalState*
EMMANuclearReactionTwoBody::ApplyYourself(const G4HadProjectile& aTrack, G4Nucleus& targetNucleus)
{
  theParticleChange.Clear();
  const G4HadProjectile* aParticle = &aTrack;

  // Z and A of projectile and target (1+2):
  G4int A1 = aParticle->GetDefinition()->GetAtomicMass();
  G4int Z1 = aParticle->GetDefinition()->GetAtomicNumber();
  G4int A2 = targetNucleus.GetA_asInt();
  G4int Z2 = targetNucleus.GetZ_asInt();

  // masses of 1+2
  const G4ParticleDefinition* theParticle = aParticle->GetDefinition();
  //  G4double m1 = theParticle->GetPDGMass();
  G4double m2 = G4NucleiProperties::GetNuclearMass(A2, Z2);

  // Z and A of reaction products (3+4):
  G4int Z3 = Z3rea;
  G4int A3 = A3rea;
  G4int Z4 = Z4rea;
  G4int A4 = A4rea;

  // masses of 3+4
  G4double m3 = G4NucleiProperties::GetNuclearMass(A3, Z3);
  G4double m4 = 0;
  if (A4 == 0) { m4 = 0; }
  if (A4 > 0) { m4 = G4NucleiProperties::GetNuclearMass(A4, Z4); }

  // determine velocity of CM frame relative to LAB frame
  G4LorentzVector lv1 = aParticle->Get4Momentum();
  G4LorentzVector lv2(0.0,0.0,0.0,m2);   
  G4LorentzVector lv = lv1 + lv2;
  G4ThreeVector bst = lv.boostVector(); // divides the spatial component (p) by the time component (E)

  // transform 4-momenta to CM frame
  lv1.boost(-bst);
  lv2.boost(-bst);
  G4double etot = lv1[3] + lv2[3]; // total energy in CM

  // if energy is insufficient, nothing happens
  if (etot<m3+m4) {
    theParticleChange.SetEnergyChange(aParticle->GetKineticEnergy());
    return &theParticleChange;
  }

  // Compute energies and momentum of reaction products (3+4)
  G4double e3 = ( etot*etot + m3*m3 - m4*m4 ) / (2*etot); 
  G4double e4 = etot - e3; 
  G4double pcm = sqrt( e3*e3 - m3*m3 );

  // Sampling of directions in CM system
  G4double tmax = 1. - std::cos(thetaCMmax/deg);
  G4double t    = G4UniformRand();
  G4double phi  = G4UniformRand()*CLHEP::twopi;
  G4double cost = 1. - tmax*t;
  G4double sint = std::sqrt((1.0-cost)*(1.0+cost));
  
  // Lorentz vectors of reaction products (3+4)
  G4ThreeVector v3(sint*std::cos(phi),sint*std::sin(phi),cost);
  v3 = v3 * pcm;
  G4ThreeVector v4 = -v3;
  G4LorentzVector lv3(v3.x(),v3.y(),v3.z(),e3);
  G4LorentzVector lv4(v4.x(),v4.y(),v4.z(),e4);
  
  // Transform to LAB frame
  lv3.boost(bst);
  lv4.boost(bst);
    
  // Set energy of primary to zero
  theParticleChange.SetEnergyChange(0);
  
  // Create secondaries
  // (3)
  G4ParticleDefinition * theDef3=0;
  if(Z3 == 1 && A3 == 1)       { theDef3 = theProton; }
  else if (Z3 == 1 && A3 == 2) { theDef3 = theDeuteron; }
  else if (Z3 == 1 && A3 == 3) { theDef3 = theTriton; }
  else if (Z3 == 2 && A3 == 3) { theDef3 = theHe3; }
  else if (Z3 == 2 && A3 == 4) { theDef3 = theAlpha; }
  else if (Z3 == 0 && A3 == 0) { theDef3 = theGamma; }
  else if (Z3 == 0 && A3 == 1) { theDef3 = theNeutron;}
  else {
    theDef3 = G4ParticleTable::GetParticleTable()->GetIonTable()->GetIon(Z3,A3,0.0);
  }
  // (4)
  G4ParticleDefinition * theDef4=0;
  if(Z4 == 1 && A4 == 1)       { theDef4 = theProton; }
  else if (Z4 == 1 && A4 == 2) { theDef4 = theDeuteron; }
  else if (Z4 == 1 && A4 == 3) { theDef4 = theTriton; }
  else if (Z4 == 2 && A4 == 3) { theDef4 = theHe3; }
  else if (Z4 == 2 && A4 == 4) { theDef4 = theAlpha; }
  else if (Z3 == 0 && A3 == 0) { theDef3 = theGamma; }
  else if (Z3 == 0 && A3 == 1) { theDef3 = theNeutron;}
  else {
    theDef4 = G4ParticleTable::GetParticleTable()->GetIonTable()->GetIon(Z4,A4,0.0);
  }
  
  // Kinetic energies of reaction products in lab 
  G4double ekin3 = lv3[3] - m3;
  G4double ekin4 = lv4[3] - m4;
  G4double ekincut = GetRecoilEnergyThreshold(); // currently set to 0.1 MeV
  
  // Add secondaries with appropriate data    
  if (ekin3>ekincut) {
    G4DynamicParticle * aSec3 = new G4DynamicParticle(theDef3, lv3);
    theParticleChange.AddSecondary(aSec3);
  }
  if (ekin4>ekincut) {
    G4DynamicParticle * aSec4 = new G4DynamicParticle(theDef4, lv4);
    theParticleChange.AddSecondary(aSec4);
  }
  

  return &theParticleChange;
    
}

